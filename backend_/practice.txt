.......................................................................................
userModule.js  


const pool = require('../config/database');
const bcrypt = require('bcrypt');

class User {
    static async create(userData) {
        const { name, email, phone, password, role } = userData;
        const hashedPassword = await bcrypt.hash(password, 10);
        
        const [result] = await pool.execute(
            'INSERT INTO users (name, email, phone, password, role) VALUES (?, ?, ?, ?, ?)',
            [name, email, phone, hashedPassword, role]
        );
        
        return this.findById(result.insertId);
    }

    static async findById(id) {
        const [rows] = await pool.execute('SELECT * FROM users WHERE id = ?', [id]);
        return rows[0];
    }

    static async findByEmail(email) {
        const [rows] = await pool.execute('SELECT * FROM users WHERE email = ?', [email]);
        return rows[0];
    }

    static async update(id, updateData) {
        const allowedUpdates = ['name', 'email', 'phone', 'role'];
        const updates = Object.keys(updateData)
            .filter(key => allowedUpdates.includes(key))
            .map(key => `${key} = ?`);
        
        if (updates.length === 0) return null;
        
        const values = Object.keys(updateData)
            .filter(key => allowedUpdates.includes(key))
            .map(key => updateData[key]);
        
        values.push(id);
        
        await pool.execute(
            `UPDATE users SET ${updates.join(', ')} WHERE id = ?`,
            values
        );
        
        return this.findById(id);
    }

    static async delete(id) {
        await pool.execute('DELETE FROM users WHERE id = ?', [id]);
    }
}

module.exports = User;
.......................................................................................



.......................................................................................

userroute 
const express = require("express");
const { register, login, getUserData, logout } = require("../controllers/userController");
const { isVerifiedUser } = require("../middlewares/tokenVerification");
const router = express.Router();


// Authentication Routes
router.route("/register").post(register);
router.route("/login").post(login);
router.route("/logout").post(isVerifiedUser, logout)

router.route("/").get(isVerifiedUser , getUserData);

module.exports = router;
.......................................................................................
.......................................................................................
// userController.jsconst createHttpError = require("http-errors");
const User = require("../models/userModel");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const config = require("../config/config");

const register = async (req, res, next) => {
    try {
        const { name, phone, email, password, role } = req.body;

        if(!name || !phone || !email || !password || !role){
            const error = createHttpError(400, "All fields are required!");
            return next(error);
        }

        const isUserPresent = await User.findByEmail(email);
        if(isUserPresent){
            const error = createHttpError(400, "User already exists!");
            return next(error);
        }

        const newUser = await User.create({ name, phone, email, password, role });
        res.status(201).json({success: true, message: "New user created!", data: newUser});

    } catch (error) {
        next(error);
    }
}

const login = async (req, res, next) => {
    try {
        const { email, password } = req.body;

        if(!email || !password) {
            const error = createHttpError(400, "All fields are required!");
            return next(error);
        }

        const isUserPresent = await User.findByEmail(email);
        if(!isUserPresent){
            const error = createHttpError(401, "Invalid Credentials");
            return next(error);
        }

        const isMatch = await bcrypt.compare(password, isUserPresent.password);
        if(!isMatch){
            const error = createHttpError(401, "Invalid Credentials");
            return next(error);
        }

        const accessToken = jwt.sign({id: isUserPresent.id}, config.accessTokenSecret, {
            expiresIn : '1d'
        });

        res.cookie('accessToken', accessToken, {
            maxAge: 1000 * 60 * 60 *24 * 30,
            httpOnly: true,
            sameSite: 'none',
            secure: true
        });

        res.status(200).json({
            success: true, 
            message: "User login successfully!", 
            data: isUserPresent
        });

    } catch (error) {
        next(error);
    }
}

const getUserData = async (req, res, next) => {
    try {
        const user = await User.findById(req.user.id);
        res.status(200).json({success: true, data: user});
    } catch (error) {
        next(error);
    }
}

const logout = async (req, res, next) => {
    try {
        res.clearCookie('accessToken');
        res.status(200).json({success: true, message: "User logout successfully!"});
    } catch (error) {
        next(error);
    }
}

module.exports = { register, login, getUserData, logout };